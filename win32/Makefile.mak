# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# Windows makefile for Nharu project
# Copyleft (C) 2016 by The Crypthing Initiative
# Authors:
#	diego.sohsten@caixa.gov.br
# 	yorick.flannagan@gmail.com
#
# Required environment
#	That one generated by vcvarsall.bat
#	HOME: Nharu Library directory
#	PREFIX: Installation directory
#	JAVA_HOME: Java 7 home directory
#   VERSION: Library version
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CC           = cl
LINK         = link
IMPLIB       = lib
MC           = mc
RC           = rc

#
# Environment check
# # # # # # # # # # #
!IFNDEF HOME
!ERROR HOME environment variable is required
!ENDIF
!IFNDEF PREFIX
!ERROR PREFIX environment variable is required
!ENDIF
!IFNDEF JAVA_HOME
!ERROR JAVA_HOME environment variable is required
!ENDIF
!IFNDEF VERSION
!ERROR VERSION environment variable is required
!ENDIF


!IF DEFINED(_DEBUG_)
TARGET       = debug
!ELSE
TARGET       = release
!ENDIF
OPENSSL      = $(PREFIX)\$(TARGET)\openssl
LIBIDN       = $(PREFIX)\$(TARGET)\idn
DIST_DIR     = $(PREFIX)\$(TARGET)\nharu

#
# Target definitions
# # # # # # # # # # #
T_CFLAGS     =
T_CVARS      =
T_LIB_LFLAGS =
T_JCA_LFLAGS =
T_TST_LFLAGS =

#
# Local variables
# # # # # # # # # # #
LIB_SRC     = $(HOME)\src
NHU_HEADERS = $(HOME)\include
JCA_SRC     = $(HOME)\jca\native
JVA_HEADERS = $(JCA_SRC)
P11_HEADERS = $(HOME)
TST_SRC     = $(HOME)\test
OBJ         = $(HOME)\bin\$(TARGET)
OUT         = $(HOME)\dist\$(TARGET)
SSL_INCLUDE = /I"$(OPENSSL)\include"
IDN_INCLUDE = /I"$(LIBIDN)\include"
JDK_INCLUDE = /I"$(JAVA_HOME)\include" /I"$(JAVA_HOME)\include\win32"
SSL_LIBPATH = /LIBPATH:"$(OPENSSL)\lib"
IDN_LIBPATH = /LIBPATH:"$(LIBIDN)\lib"

!IF DEFINED(_DEBUG_)
!include <debug.mak>
!ELSE
!include <release.mak>
!ENDIF

#
# Common definitions
# # # # # # # # # # #
C_CFLAGS    = /c /FC /permissive- /GS /TC /analyze- /Gm- /Zc:wchar_t /Zc:inline /Zc:forScope /sdl /fp:precise /WX- /Gd /Oy- /nologo /diagnostics:classic /wd"4018" /wd"4389" /wd"4244" /wd"4005" /wd"4142" /wd"4701" /wd"4703" /wd"4706"
C_CVARS     = /D "WIN32" /D "_WIN32" /D "_UNICODE" /D "UNICODE" /D "_CRT_SECURE_NO_WARNINGS" 
C_LFLAGS    = /NOLOGO

#
# Static library
# # # # # # # # # # #
C_LIB_FLAGS = $(T_CFLAGS) $(C_CFLAGS)
C_LIB_VARS  = $(T_CVARS) $(C_CVARS) /D "_LIB"
L_LIB_FLAGS = $(T_LIB_LFLAGS) $(C_LFLAGS)
LIB_SOURCE  = $(LIB_SRC)\cms_env.c $(LIB_SRC)\cms_sd.c $(LIB_SRC)\crypto.c $(LIB_SRC)\libgfshare.c $(LIB_SRC)\parser.c $(LIB_SRC)\pkibr.c $(LIB_SRC)\pkix.c $(LIB_SRC)\sysservc.c $(LIB_SRC)\x509.c $(LIB_SRC)\issue.c
LIB_HEADERS = $(LIB_SRC) $(NHU_HEADERS) $(P11_HEADERS)
LIB_INCLUDE = /I"$(NHU_HEADERS)" /I"$(LIB_SRC)" /I"$(P11_HEADERS)" $(SSL_INCLUDE) $(IDN_INCLUDE)

#
# Dinamic JCA library
# # # # # # # # # # #
C_JCA_FLAGS = $(T_CFLAGS) $(C_CFLAGS) 
C_JCA_CVARS = /D "_USRDLL" /D "_WINDOWS" /D "_WINDLL" /D "NHARUJCA_EXPORTS"
L_JCA_FLAGS = $(T_JCA_LFLAGS) $(C_LFLAGS) /DLL /SUBSYSTEM:WINDOWS /MACHINE:X86
JCA_SOURCE  = $(JCA_SRC)\8x256_tables.c $(JCA_SRC)\cdecode.c $(JCA_SRC)\cencode.c $(JCA_SRC)\cms_glue.c $(JCA_SRC)\crc.c $(JCA_SRC)\crypto_glue.c $(JCA_SRC)\general.c $(JCA_SRC)\versionjca.c $(JCA_SRC)\x509_glue.c $(JCA_SRC)\version.c $(JCA_SRC)\issue_glue.c
JCA_HEADERS = $(LIB_HEADERS) $(JVA_HEADERS)
JCA_INCLUDE = $(LIB_INCLUDE) $(JDK_INCLUDE) /I"$(JVA_HEADERS)"
JCA_LIBPATH = /LIBPATH:"$(OUT)" $(SSL_LIBPATH) $(IDN_LIBPATH)
JCA_IMPLIBS = "nharu.lib" "libidn.lib" "libcrypto.lib" "crypt32.lib" "ws2_32.lib" "kernel32.lib" "user32.lib" "gdi32.lib" "winspool.lib" "comdlg32.lib" "advapi32.lib" "shell32.lib" "ole32.lib" "oleaut32.lib" "uuid.lib" "odbc32.lib" "odbccp32.lib"
MAVEN_ARGS  = -D install.dir=$(OUT)\java -D bin.dir=$(OBJ)\java -D jar.version=$(VERSION) -D java.home=$(JAVA_HOME)


#
# Test application
# # # # # # # # # # #
C_TST_FLAGS = $(C_LIB_FLAGS)
C_TST_VARS  = $(T_CVARS) $(C_CVARS) /D "_CONSOLE"
L_TST_FLAGS = $(T_TST_LFLAGS) $(C_LFLAGS) /SUBSYSTEM:CONSOLE /NXCOMPAT /DYNAMICBASE /MACHINE:X86
TST_SOURCE  = $(TST_SRC)\cadest.c $(TST_SRC)\cert_t.c $(TST_SRC)\cms_t.c $(TST_SRC)\crl_t.c $(TST_SRC)\crypto_t.c $(TST_SRC)\nmain.c $(TST_SRC)\parser_t.c $(TST_SRC)\issue_t.c
TST_HEADERS = $(LIB_HEADERS) $(TST_SRC)
TST_INCLUDE = $(LIB_INCLUDE) /I"$(TST_SRC)"
TST_LIBPATH = $(JCA_LIBPATH)
TST_IMPLIBS = $(JCA_IMPLIBS)


#
# Default target
# # # # # # # # # # #
ALL: PREPARE $(OUT)\nharu.lib 
ALL: MAKEVERSION $(OUT)\nharujca.dll
ALL: $(OUT)\test.exe
ALL: MAKEJAR


#
# Linker targets
# # # # # # # # # # #
$(OUT)\nharu.lib: $(LIB_SOURCE:.c=.obj)
	$(IMPLIB) $(L_LIB_FLAGS) /OUT:$(OUT)\nharu.lib @<<
$(OBJ)\lib\cms_env.obj
$(OBJ)\lib\cms_sd.obj
$(OBJ)\lib\crypto.obj
$(OBJ)\lib\libgfshare.obj
$(OBJ)\lib\parser.obj
$(OBJ)\lib\pkibr.obj
$(OBJ)\lib\pkix.obj
$(OBJ)\lib\sysservc.obj
$(OBJ)\lib\x509.obj
$(OBJ)\lib\issue.obj
<<

$(OUT)\nharujca.dll: $(JCA_SOURCE:.c=.obj)
	$(LINK) $(L_JCA_FLAGS) $(JCA_IMPLIBS) $(JCA_LIBPATH) /OUT:$(OUT)\nharujca.dll @<<
$(OBJ)\jca\8x256_tables.obj
$(OBJ)\jca\cdecode.obj
$(OBJ)\jca\cencode.obj
$(OBJ)\jca\cms_glue.obj
$(OBJ)\jca\crc.obj
$(OBJ)\jca\crypto_glue.obj
$(OBJ)\jca\general.obj
$(OBJ)\jca\versionjca.obj
$(OBJ)\jca\x509_glue.obj
$(OBJ)\jca\version.obj
$(OBJ)\jca\issue_glue.obj
<<

$(OUT)\test.exe: $(TST_SOURCE:.c=.obj)
	$(LINK) $(L_TST_FLAGS) $(TST_IMPLIBS) $(TST_LIBPATH) /OUT:$(OUT)\test.exe @<<
$(OBJ)\test\cadest.obj
$(OBJ)\test\cert_t.obj
$(OBJ)\test\cms_t.obj
$(OBJ)\test\crl_t.obj
$(OBJ)\test\crypto_t.obj
$(OBJ)\test\nmain.obj
$(OBJ)\test\parser_t.obj
$(OBJ)\test\issue_t.obj
<<


#
# Compiler targets
# # # # # # # # # # #
$(LIB_SOURCE:.c=.obj): $(LIB_SOURCE) $(LIB_HEADERS)
	$(CC) $(C_LIB_FLAGS) $(C_LIB_VARS) $(LIB_INCLUDE) /Fo$(OBJ)\lib\ %s

$(JCA_SOURCE:.c=.obj): $(JCA_SOURCE) $(JCA_HEADERS)
	$(CC) $(C_JCA_FLAGS) $(C_JCA_CVARS) $(JCA_INCLUDE) /Fo$(OBJ)\jca\ %s

$(TST_SOURCE:.c=.obj): $(TST_SOURCE) $(TST_HEADERS)
	$(CC) $(C_TST_FLAGS) $(C_TST_VARS) $(TST_INCLUDE) /Fo$(OBJ)\test\ %s

#
# Phony targets
# # # # # # # # # # #
PREPARE:
	!SETLOCAL EnableExtensions
	!IF NOT EXIST "$(OBJ)"      MKDIR "$(OBJ)"
	!IF NOT EXIST "$(OBJ)\lib"  MKDIR "$(OBJ)\lib"
	!IF NOT EXIST "$(OBJ)\jca"  MKDIR "$(OBJ)\jca"
	!IF NOT EXIST "$(OBJ)\test" MKDIR "$(OBJ)\test"
	!IF NOT EXIST "$(OUT)"      MKDIR "$(OUT)"
	!ENDLOCAL

CLEAN:
	!PUSHD "$(HOME)" && MVN -B clean $(MAVEN_ARGS) && POPD
	!RMDIR /S /Q "$(OBJ)\lib"
	!RMDIR /S /Q "$(OBJ)\jca"
	!RMDIR /S /Q "$(OBJ)\test"
	!DEL /Q "$(OUT)\nharu*.*"
	!DEL /Q "$(OUT)\test.*"
	!DEL /Q "$(JCA_SRC)\version.c"

MAKEVERSION:
	!"$(HOME)\jca\make_version.bat" $(VERSION) "$(JCA_SRC)"

MAKEJAR:
	!PUSHD "$(HOME)" && MVN -B package $(MAVEN_ARGS) && POPD

TEST:
	!"$(OUT)\test.exe" "$(TST_SRC)\repo"
	!"$(JAVA_HOME)\bin\java.exe" -classpath "$(OUT)\java\nharujca-$(VERSION).jar" -Dorg.crypthing.security.provider.nharulib="$(OUT)\nharujca.dll" org.crypthing.security.provider.NharuProvider "$(TST_SRC)\repo\signer.p12" "$(TST_SRC)\repo\trust.jks"

INSTALL:
	!SETLOCAL EnableExtensions
	!IF NOT EXIST "$(DIST_DIR)\include\pkcs11"      MKDIR "$(DIST_DIR)\include\pkcs11"
	!IF NOT EXIST "$(DIST_DIR)\libs"                MKDIR "$(DIST_DIR)\libs"
	!COPY /Y "$(OUT)\nharu.lib"                    "$(DIST_DIR)\libs"
	!COPY /Y "$(OUT)\nharujca.dll"                 "$(DIST_DIR)\libs"
	!COPY /Y "$(NHU_HEADERS)\*.h"                  "$(DIST_DIR)\include"
	!COPY /Y "$(P11_HEADERS)\pkcs11\*.h"           "$(DIST_DIR)\include\pkcs11"
	!COPY /Y "$(OUT)\java\nharujca-$(VERSION).jar" "$(DIST_DIR)\libs"
	!ENDLOCAL

DISTCLEAN:
	!RMDIR /S /Q "$(DIST_DIR)\libs"
	!RMDIR /S /Q "$(DIST_DIR)\include"
