@ECHO OFF

:: ---------------------------------------------------
:: Generated by configure.vbs - EDIT AT YOUR OWN RISK!
:: ---------------------------------------------------

ECHO.
ECHO  * * * * * * * * * * * * * * * * * * * * * * * *
ECHO  GNU Libidn Library
ECHO  Build under Windows
ECHO  -----------------------------------------------
ECHO  Copyleft (C) 2015 by The Crypthing Initiative
ECHO  Authors:
ECHO    diego.sohsten@caixa.gov.br
ECHO    yorick.flannagan@gmail.com
ECHO.
ECHO  Optional command line arguments:
ECHO     --target=[__TARGET]: base target install directory. Default: __HOME\dist
ECHO     --platform=[__PLATFORM]: target platform. Default: Win32
ECHO.
ECHO  * * * * * * * * * * * * * * * * * * * * * * * *
ECHO.

:: Initialization
SET __CUR=%~dp0
SET __VCENV=vcvarsamd64_x86.bat
FOR %%i IN ("%~dp0..") DO SET "__HOME=%%~fi"
SET __SOURCE=%__CUR%libidn
FOR %%a IN (%*) DO (CALL:GET_ARGS "--","%%a")
VERIFY >NUL
IF DEFINED --target         (SET __TARGET=%--target%)
IF DEFINED --platform       (SET __PLATFORM=%--platform%)
IF "%__PLATFORM%" EQU ""    (SET __PLATFORM=Win32)
IF "%__TARGET%" EQU ""      (SET __INSTALL=%__HOME%\dist\%__PLATFORM%\idn) ELSE (SET __INSTALL=%__TARGET%\%__PLATFORM%\idn)
IF "%__PLATFORM%" EQU "x64" (SET __VCENV=vcvars64.bat)

:: Generated by Configure
SET __VS__INSTALL_PATH=__VS_INSTALL_PATH__
SET __LANGS=__LANGS__

:: Display values
ECHO.
ECHO  -----------------------------------------------
ECHO  GNU Libidn Windows configuration environment
ECHO  -----------------------------------------------
ECHO.
ECHO  Source files location:         %__SOURCE%
ECHO  Target install directory:      %__INSTALL%
ECHO  Intermediate output directory: %__CUR%
ECHO  Compilation environment:       %__VS__INSTALL_PATH%VC\Auxiliary\Build\%__VCENV%
ECHO  Locale files generation:       perl.exe  gen-tld-tables.pl %__LANGS% TO "%__SOURCE%\lib\tlds.c"
ECHO  nmake environment:             PACKAGE=%__SOURCE%; OUTPUT=%__CUR%; PREFIX=%__INSTALL%
ECHO.

:SDKENV
CALL "%__VS__INSTALL_PATH%VC\Auxiliary\Build\%__VCENV%"

ECHO.
ECHO  -----------------------------------------------
ECHO  Preparing GNU Libidn for compilation
ECHO  -----------------------------------------------
ECHO.
:GENRFC
CD %__SOURCE%\lib
IF NOT EXIST "%__SOURCE%\lib\rfc3454.c" (
	CALL perl.exe gen-stringprep-tables.pl ..\doc\specifications\rfc3454.txt
	IF %ERRORLEVEL% NEQ 0 GOTO :END
)

:GENTLD
IF NOT EXIST "%__SOURCE%\lib\tlds.c" (
	CALL perl.exe  gen-tld-tables.pl %__LANGS%>%__SOURCE%\lib\tlds.c
	IF %ERRORLEVEL% NEQ 0 GOTO :END
)

:ADJUST
IF NOT EXIST "%__SOURCE%\lib\gl\unistr.h" (
	COPY %__SOURCE%\lib\gl\unistr.in.h %__SOURCE%\lib\gl\unistr.h
)
IF NOT EXIST "%__SOURCE%\lib\gl\unitypes.h" (
	COPY %__SOURCE%\lib\gl\unitypes.in.h %__SOURCE%\lib\gl\unitypes.h
)
IF NOT EXIST "%__SOURCE%\lib\gl\unused-parameter.h" (
	COPY %__SOURCE%\build-aux\snippet\unused-parameter.h %__SOURCE%\lib\gl\unused-parameter.h
)
ECHO #ifndef _AC_STDINT_H>%__SOURCE%\windows\include\ac-stdint.h
ECHO #define _AC_STDINT_H 1>>%__SOURCE%\windows\include\ac-stdint.h
ECHO #ifndef _GENERATED_STDINT_H>>%__SOURCE%\windows\include\ac-stdint.h
ECHO #define _GENERATED_STDINT_H>>%__SOURCE%\windows\include\ac-stdint.h
ECHO #include ^<stdint.h^>>>%__SOURCE%\windows\include\ac-stdint.h
ECHO #define IDNAPI __declspec(dllexport)>>%__SOURCE%\windows\include\ac-stdint.h
ECHO #define gint16     int16_t>>%__SOURCE%\windows\include\ac-stdint.h
ECHO #ifdef  _WIN64>>%__SOURCE%\windows\include\ac-stdint.h
ECHO typedef __int64    ssize_t;>>%__SOURCE%\windows\include\ac-stdint.h
ECHO #else>>%__SOURCE%\windows\include\ac-stdint.h
ECHO typedef _W64 int	ssize_t;>>%__SOURCE%\windows\include\ac-stdint.h
ECHO #endif>>%__SOURCE%\windows\include\ac-stdint.h
ECHO #endif>>%__SOURCE%\windows\include\ac-stdint.h
ECHO #endif>>%__SOURCE%\windows\include\ac-stdint.h

ECHO.
ECHO  -----------------------------------------------
ECHO  Building and installing GNU Libidn
ECHO  -----------------------------------------------
ECHO.
:MAKEENV
SET PACKAGE=%__SOURCE%
SET OUTPUT=%__CUR%
SET PREFIX=%__INSTALL%
CD %__CUR%
IF EXIST %__TARGET% DO (
	CALL NMAKE /F idn.mak UNINSTALL
	CALL NMAKE /F idn.mak CLEAN
)
CALL NMAKE /F idn.mak
IF %ERRORLEVEL% NEQ 0 GOTO :END
CALL NMAKE /F idn.mak INSTALL
IF %ERRORLEVEL% NEQ 0 GOTO :END
CALL NMAKE /F idn.mak CLEAN
ECHO.
ECHO  -----------------------------------------------
ECHO  All tasks are done
ECHO  -----------------------------------------------
ECHO.

GOTO:END

:GET_ARGS
:: PROCESS COMAND LINE ARGUMENT OF TYPE --arg=value
:: %~1: ARGUMENT MARKER (USUALY --)
:: %~2: OUT
ECHO.%~2 | FINDSTR /C:"%~1" 1>nul
IF NOT errorlevel 1 (
	SET __KEY=%~2
) ELSE (
	SET __VALUE=%~2
)
IF DEFINED __KEY (
	SET %__KEY%=%~2
)
IF DEFINED __VALUE (
	IF DEFINED __KEY (
		SET %__KEY%=%~2
	)
	SET __KEY=
	SET __VALUE=
)
GOTO:EOF

:END
SET __CUR=
SET __VCENV=
SET __HOME=
SET __SOURCE=
SET --target=
SET --platform=
SET --output=
SET __TARGET=
SET __PLATFORM=
SET __INSTALL=
SET __VS__INSTALL_PATH=
SET __LANGS=
