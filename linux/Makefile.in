SHELL        = /bin/bash
CC           = gcc
AR           = ar

PROJECT      = __PROJECT__
BIN_DIR      = __BIN_DIR__
DIST_DIR     = __DIST_DIR__
OPENSSL      = __OPENSSL__
IDN          = __IDN__
DLA_LIB      = __DLA_LIB__
JAVA_HOME    = __JAVA_HOME__
VERSION      = $(shell git describe)
JCA_BIN      = __JCA_BIN__
JCA_DIST     = __JCA_DIST__

LIB_SRCDIR   = $(PROJECT)/src
LIB_OBJDIR   = $(BIN_DIR)/lib
LIB_INCLUDES = -I$(LIB_SRCDIR) -I$(PROJECT)/include -I$(PROJECT) -I$(OPENSSL)/include -I$(IDN)/include
LIB_TARGET   = $(DIST_DIR)/lib/libnharu.a
LIB_SRCS     = $(shell find $(LIB_SRCDIR) -name '*.c')
LIB_OBJS     = $(patsubst $(LIB_SRCDIR)/%.c,$(LIB_OBJDIR)/%.o,$(LIB_SRCS))
JCA_SRCDIR   = $(PROJECT)/jca/native
JCA_OBJDIR   = $(BIN_DIR)/jca
JCA_INCLUDES = -I$(JCA_SRCDIR) -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/linux
JCA_TARGET   = $(DIST_DIR)/lib/libnharujca.so
JCA_SRCS     = $(shell find $(JCA_SRCDIR) -name '*.c')
JCA_OBJS     = $(patsubst $(JCA_SRCDIR)/%.c,$(JCA_OBJDIR)/%.o,$(JCA_SRCS))
IMP_LIBS     = -lnharu -lcrypto -lidn -lpthread -ldl
LDLIBS       = -L$(DIST_DIR)/lib -L$(OPENSSL)/lib -L$(IDN)/lib -L$(DLA_LIB)
TST_SRCDIR   = $(PROJECT)/test
TST_OBJDIR   = $(BIN_DIR)/test
TST_INCLUDES = -I$(TST_SRCDIR)
TST_TARGET   = $(DIST_DIR)/ntest-app
TST_SRCS     = $(shell find $(TST_SRCDIR) -name '*.c')
TST_OBJS     = $(patsubst $(TST_SRCDIR)/%.c,$(TST_OBJDIR)/%.o,$(TST_SRCS))
VPATH        = $(LIB_SRCDIR) : $(JCA_SRCDIR) : $(TST_SRCDIR)
FILES        = $(LIB_SRCS) $(JCA_SRCS) $(TST_SRCS)
ALL_INCLUDES = $(LIB_INCLUDES) $(JCA_INCLUDES) $(TST_INCLUDES)
MAVEN_ARGS   = -D install.dir=$(JCA_DIST) -D bin.dir=$(JCA_BIN) -D jar.version=$(VERSION) -D jdk.home=$(JAVA_HOME) -Dhttps.protocols=TLSv1.2

CFLAGS       = -pedantic-errors -pedantic -Wall -ansi -Winline -Wunused-parameter -pthread -fPIC
ifeq ($(_DEBUG_),)
CFLAGS      += -O2
MAVEN_ARGS  += -D log.level=LOG_LEVEL_ERROR
else
CFLAGS      += -ggdb3 -D_DEBUG -D_DEBUG_ -O0
MAVEN_ARGS  += -D log.level=LOG_LEVEL_TRACE
endif
ARFLAGS      = -r -s
LDFLAGS      = -static-libgcc -Xlinker -z -Xlinker defs -fPIC


all: prepare $(LIB_TARGET) $(JCA_TARGET) $(TST_TARGET) build-java

$(LIB_TARGET): $(LIB_OBJS)
	$(AR) $(ARFLAGS) $@ $(LIB_OBJS)

$(LIB_OBJDIR)/%.o: $(LIB_SRCDIR)/%.c
	$(CC) $(CFLAGS) $(LIB_INCLUDES) -c $< -o $@

$(JCA_TARGET): $(JCA_OBJS)
	$(CC) $(LDFLAGS) -Wl,--wrap=memcpy -shared $(LDLIBS) $(JCA_OBJS) -o $@ $(IMP_LIBS)

$(JCA_OBJDIR)/%.o: $(JCA_SRCDIR)/%.c
	$(CC) $(CFLAGS) $(LIB_INCLUDES) $(JCA_INCLUDES) -c $< -o $@

$(TST_TARGET): $(TST_OBJS)
	$(CC) $(LDFLAGS) $(LDLIBS) $(TST_OBJS) -o $@ $(IMP_LIBS)

$(TST_OBJDIR)/%.o: $(TST_SRCDIR)/%.c
	$(CC) $(CFLAGS) $(LIB_INCLUDES) $(TST_INCLUDES) -c $< -o $@


.PHONY: clean prepare build-java test
clean:
	cd ..; mvn -B clean $(MAVEN_ARGS); cd -; \
	rm $(PROJECT)/files.d $(DIST_DIR)/lib $(TST_TARGET) $(TST_OBJDIR) $(LIB_OBJDIR) $(JCA_OBJDIR) -Rf


prepare:
	mkdir -p $(LIB_OBJDIR) $(JCA_OBJDIR) $(TST_OBJDIR) $(DIST_DIR)/lib; \
	$(PROJECT)/jca/mkver $(VERSION)

build-java:
	cd ..; mvn -B package $(MAVEN_ARGS); cd -

test:
	$(TST_TARGET) $(TST_SRCDIR)/repo
	$(JAVA_HOME)/bin/java -cp $(JCA_DIST)/nharujca-$(VERSION).jar \
	-Dorg.crypthing.security.provider.nharulib=$(JCA_TARGET)      \
	org.crypthing.security.provider.NharuProvider $(TST_SRCDIR)/repo/signer.p12 $(TST_SRCDIR)/repo/trust.jks

$(PROJECT)/files.d: $(FILES)
	cat /dev/null > $(PROJECT)/files.d;                        \
	for i in $(FILES); do                                      \
		$(CC) -MM $$i $(ALL_INCLUDES) >> $(PROJECT)/files.d; \
	done;                                                      \
	touch -m $(PROJECT)/files.d

include $(PROJECT)/files.d

