#!/bin/bash
# # # # # # # # # # # # # # # # # # # # # # # # # # # #
# NHARU libraries development environment configuration
# Copyleft (C) 2015 by The Crypthing Initiative
# # # # # # # # # # # # # # # # # # # # # # # # # # # #

printf "%s\n" "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
printf "%s\n" "Nharu development environment configuration"
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
CUR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
PARENT=$(dirname $CUR)

usage() {
	printf "%s\n"   "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
	printf "%s\n"   "Nharu libraries development environment configuration tool"
	printf "%s\n"   "Optional arguments:"
	printf "%s\n"   "--prefix: libraries install directory. Default value:"
	printf "\t%s\n" "[nharu]/libs, where [nharu] refers to project diretory"
	printf "%s\n"   "--cflags: compiler flags. Default value: -pedantic-errors"
	printf "\t%s\n" "-pedantic -Wall -ansi -pthread -Winline -Wunused-parameter"
	printf "%s\n"   "--arflags: archive flags. Default value: -r -s"
	printf "%s\n"   "--cxxflags: linker flags. Default value: -shared "
	printf "\t%s\n" "-shared-libgcc -Xlinker -z -Xlinker defs"
	printf "%s\n"   "--openssl: OpenSSL installation directoy. If not supplied,"
	printf "\t%s\n" "it is sought from Nharu project directory"
	printf "%s\n"   "--idn: GNU Libidn installation directoy. If not supplied,"
	printf "\t%s\n" "it is sought from Nharu project directory"
	printf "%s\n"   "--jdk: JDK installation directoy. If not supplied and a"
	printf "\t%s\n" "JAVA_HOME environment variable is not defined,"
	printf "\t%s\n" "it is sought from user's home directory"
	printf "%s\n"   "--ant: Apache Ant Java compiler utility. If not supplied,"
	printf "\t%s\n" "it is sought from user's home directory"
	printf "%s\n"   "--ant-contrib: Apache Ant utility. If not supplied,"
	printf "\t%s\n" "it is sought from user's home directory"
	printf "%s\n"   "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
}

# DEFAULT ARGUMENT VALUES
_OUTPUT_="$PARENT/libs"
_CFLAGS_="-pedantic-errors -pedantic -Wall -ansi -pthread -Winline -Wunused-parameter"
_ARFLAGS_="-r -s"
_CXXFLAGS_="-shared -shared-libgcc -Xlinker -z -Xlinker defs"

# COMMAND LINE
sep='='
while [ $# -ne 0 ]
do
	case $1 in
	  (*"$sep"*)
	    key=${1%%"$sep"*}
	    value=${1#*"$sep"}
	    ;;
	  (*)
	    key=$1
	    value=
	    ;;
	esac
	case $key in
		(--prefix) _OUTPUT_="$value"
		;;
		(--cflags) _CFLAGS_="$value"
		;;
		(--arflags) _ARFLAGS_="$value"
		;;
		(--cxxflags) _CXXFLAGS_="$value"
		;;
		(--openssl) OPENSSL="$value"
		;;
		(--idn) IDN="$value"
		;;
		(--jdk) _JDK_="$value"
		;;
		(--ant) _ANT_HOME_="$value"
		;;
		(--ant-contrib) _ANT_CONTRIB_="$value"
		;;
		(--help)
			usage
			exit 0
		;;
		(*)
			printf "Invalid argument %s\n" "$key"
			exit 1
		;;
	esac
    shift
done

# DEPENDENCIES
printf "%s\n" "Checking project dependencies..."
if [ -z "$OPENSSL" ]; then
	OPENSSL=$(dirname $(dirname $(dirname $(find $PARENT -name opensslconf.h -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d" "))))
fi
if [ -f "$OPENSSL/include/openssl/opensslconf.h" -a -f "$OPENSSL/lib/libcrypto.a" ]; then
	_OPENSSL_INCLUDE_="$OPENSSL/include"
	_OPENSSL_LIB_="$OPENSSL/lib"
else
	printf "Could not find OpenSSL instalation directory %s\n" "$OPENSSL"
	exit 1
fi
printf "OpenSSL found at directory %s\n" "$OPENSSL"
if [ -z "$IDN" ]; then
	IDN=$(dirname $(dirname $(find $PARENT -name stringprep.h -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d" ")))
fi
if [ -f "$IDN/include/stringprep.h" -a -f "$IDN/lib/libidn.a" ]; then
	_IDN_INCLUDE_="$IDN/include"
	_IDN_DIR_="$IDN/lib"
else
	printf "Could not find GNU Libidn instalation directory %s\n" "$IDN"
	exit 1
fi
printf "GNU Libidn found at directory %s\n" "$IDN"
if [ -z "$_JDK_" ]; then
	if [ -n "$JAVA_HOME" ]; then
		_JDK_="$JAVA_HOME"
	else
		_JDK_=$(dirname $(dirname $(find $HOME -type d ! -perm -g+r,u+r,o+r -prune -o -name jni.h -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d" ")))
	fi
fi
if [ -f "$_JDK_/include/jni.h" -a -f "$_JDK_/include/linux/jni_md.h" ]; then
	if [ ! -f "$_JDK_/bin/java" -o ! -f "$_JDK_/bin/javac" ]; then
		printf "%s\n" "Could not find JDK"
		exit 1
	fi
	_JAVA_INCLUDE_="$_JDK_/include"
	_JAVA_PLATFORM_="$_JDK_/include/linux"
else
	printf "%s\n" "Could not find JDK instalation directory"
	exit 1
fi
printf "JDK found at directory %s\n" "$_JDK_"
_DLA_DIR_=$(dpkg -L libc6-dev | grep libdl\\.a | 
dirname  $(grep -v xen))
if [ ! -d "$_DLA_DIR_" ]; then
	printf "%s\n" "Could not find libdl.a"
	exit 1
fi
printf "libdl.a found at %s\n" "$_DLA_DIR_"
if [ -z "$_ANT_HOME_" ]; then
	_ANT_HOME_=$(dirname $(dirname $(find $HOME -type d ! -perm -g+r,u+r,o+r -prune -o -name ant.bat -printf "%T@ %p\n" | grep -v eclipse | sort -n | tail -1 | cut -f2- -d" ")))
fi
if [ ! -f "$_ANT_HOME_/bin/ant" ]; then
	printf "%s\n" "Could not find Apache Ant instalation directory"
	exit 1
fi
printf "Apache Ant found at directory %s\n" "$_ANT_HOME_"
if [ -z "$_ANT_CONTRIB_" ]; then
	_ANT_CONTRIB_=$(find $HOME -type d ! -perm -g+r,u+r,o+r -prune -o -name ant-contrib.jar -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d" ")
fi
if [ ! -f "$_ANT_CONTRIB_" ]; then
	printf "%s\n" "Could not find Ant Contrib instalation directory"
	exit 1
fi
printf "Ant contrib found at directory %s\n" "$_ANT_CONTRIB_"
_JEE_LIB_="$PARENT/crl-service/deps/javaee-api-6.0.jar"
if [ ! -f "$_JEE_LIB_" ]; then
	_JEE_LIB_=$(find $HOME -type d ! -perm -g+r,u+r,o+r -prune -o -name javaee-api*.jar -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d" ")
fi
if [ -z "$_JEE_LIB_" ]; then
	printf "%s\n" "Could not find J2EE API"
	exit 1
fi
printf "J2EE API interface found at %s\n" "$_JEE_LIB_"
_PICKETBOX_="$PARENT/crl-service/deps/picketbox-4.0.7.Final.jar"
if [ ! -f "$_PICKETBOX_" ]; then
	_PICKETBOX_=$(find $HOME -type d ! -perm -g+r,u+r,o+r -prune -o -name picketbox*.jar -printf "%T@ %p\n" | sort -n | tail -1 | cut -f2- -d" ")
fi
if [ -z "$_PICKETBOX_" ]; then
	printf "%s\n" "Could not find JBoss PicketBox"
	exit 1
fi
printf "JBoss PicketBox found at %s\n" "$_PICKETBOX_"

#CLEAN-UP
printf "%s\n" "Nharu library old configuration clean-up..."
if [ -f "$PARENT/src/Makefile" ]; then
	make --directory="$PARENT/src" clean
	rm -f "$PARENT/src/Makefile"
fi
if [ -f "$PARENT/jca/native/Makefile" ]; then
	make --directory="$PARENT/jca/native" clean
	rm -f "$PARENT/jca/native/Makefile"
fi
if [ -f "$PARENT/test/Makefile" ]; then
	make --directory="$PARENT/test" clean
	rm -f "$PARENT/test/Makefile"
fi
if [ -f "$PARENT/Makefile" ]; then
	rm -f "$PARENT/Makefile"
fi

printf "%s\n" "Makefiles generation..."
# OUTPUT DIRECTORY CREATION
mkdir -p "$_OUTPUT_"
if [ $? -ne 0 ]; then
	printf "Could not create output %s directory\n" "$_OUTPUT_"
	exit $?
fi

# GENERATE NHARU ARCHIVE
if [ ! -f "$CUR/src.in" ]; then
	printf "Could not find file %s/src.in\n" "$CUR"
	exit 1
fi
printf "%s\n" "# # # # # # # # # # # # # # # # # # # # # # # #">"$PARENT/src/Makefile"
printf "%s\n" "# Makefile Nharu static library">>"$PARENT/src/Makefile"
printf "%s\n" "# Copyleft (C) 2015 by The Crypthing Initiative">>"$PARENT/src/Makefile"
printf "%s\n" "# Generated by configure. Do not edit">>"$PARENT/src/Makefile"
printf "%s\n" "#">>"$PARENT/src/Makefile"
printf "%s\n" "# Make optional parameters:">>"$PARENT/src/Makefile"
printf "%s\n" "#	DEBUG=1">>"$PARENT/src/Makefile"
printf "%s\n" "#	ALIGN=1">>"$PARENT/src/Makefile"
printf "%s\n" "# # # # # # # # # # # # # # # # # # # # # # # #">>"$PARENT/src/Makefile"
IFS=''
while read -r line || [[ -n "$line" ]]; do
	NEW="${line/\_OUTPUT_/$_OUTPUT_}"
	NEW="${NEW/\_CFLAGS_/$_CFLAGS_}"
	NEW="${NEW/\_ARFLAGS_/$_ARFLAGS_}"
	NEW="${NEW/\_OPENSSL_INCLUDE_/$_OPENSSL_INCLUDE_}"
	NEW="${NEW/\_IDN_INCLUDE_/$_IDN_INCLUDE_}"
	printf "%s\n" $NEW>>"$PARENT/src/Makefile"
done < "$CUR/src.in"
printf "%s\n" "Nharu static library Makefile generated"

# GENERATE NHARU JCA SHARED OBJECT
if [ ! -f "$CUR/jca.in" ]; then
	printf "Could not find file %s/jca.in\n" "$CUR"
	exit 1
fi
printf "%s\n" "# # # # # # # # # # # # # # # # # # # # # # # #">"$PARENT/jca/native/Makefile"
printf "%s\n" "# Makefile Makefile Nharu JCA shared library">>"$PARENT/jca/native/Makefile"
printf "%s\n" "# Copyleft (C) 2015 by The Crypthing Initiative">>"$PARENT/jca/native/Makefile"
printf "%s\n" "# Generated by configure. Do not edit">>"$PARENT/jca/native/Makefile"
printf "%s\n" "#">>"$PARENT/jca/native/Makefile"
printf "%s\n" "# Make optional parameters:">>"$PARENT/jca/native/Makefile"
printf "%s\n" "#	DEBUG=1">>"$PARENT/jca/native/Makefile"
printf "%s\n" "#	ALIGN=1">>"$PARENT/jca/native/Makefile"
printf "%s\n" "# # # # # # # # # # # # # # # # # # # # # # # #">>"$PARENT/jca/native/Makefile"
IFS=''
while read -r line || [[ -n "$line" ]]; do
	NEW="${line/\_OUTPUT_/$_OUTPUT_}"
	NEW="${NEW/\_CFLAGS_/$_CFLAGS_}"
	NEW="${NEW/\_CXXFLAGS_/$_CXXFLAGS_}"
	NEW="${NEW/\_OPENSSL_INCLUDE_/$_OPENSSL_INCLUDE_}"
	NEW="${NEW/\_IDN_INCLUDE_/$_IDN_INCLUDE_}"
	NEW="${NEW/\_JAVA_INCLUDE_/$_JAVA_INCLUDE_}"
	NEW="${NEW/\_JAVA_PLATFORM_/$_JAVA_PLATFORM_}"
	NEW="${NEW/\_OPENSSL_LIB_/$_OPENSSL_LIB_}"
	NEW="${NEW/\_IDN_DIR_/$_IDN_DIR_}"
	NEW="${NEW/\_DLA_DIR_/$_DLA_DIR_}"
	printf "%s\n" $NEW>>"$PARENT/jca/native/Makefile"
done < "$CUR/jca.in"
printf "%s\n" "Nharu JCA shared library Makefile generated"

# GENERATE NHARU BASIC TEST APP
if [ ! -f "$CUR/test.in" ]; then
	printf "Could not find file %s/test.in\n" "$CUR"
	exit 1
fi
printf "%s\n" "# # # # # # # # # # # # # # # # # # # # # # # # # #">"$PARENT/test/Makefile"
printf "%s\n" "# Makefile Makefile Nharu static library test app">>"$PARENT/test/Makefile"
printf "%s\n" "# Copyleft (C) 2015 by The Crypthing Initiative">>"$PARENT/test/Makefile"
printf "%s\n" "# Generated by configure. Do not edit">>"$PARENT/test/Makefile"
printf "%s\n" "#">>"$PARENT/test/Makefile"
printf "%s\n" "# Make optional parameters:">>"$PARENT/test/Makefile"
printf "%s\n" "#	DEBUG=1">>"$PARENT/test/Makefile"
printf "%s\n" "#	ALIGN=1">>"$PARENT/test/Makefile"
printf "%s\n" "# # # # # # # # # # # # # # # # # # # # # # # # # #">>"$PARENT/test/Makefile"
IFS=''
while read -r line || [[ -n "$line" ]]; do
	NEW="${line/\_CFLAGS_/$_CFLAGS_}"
	NEW="${NEW/\_OPENSSL_INCLUDE_/$_OPENSSL_INCLUDE_}"
	NEW="${NEW/\_IDN_INCLUDE_/$_IDN_INCLUDE_}"
	NEW="${NEW/\_OPENSSL_LIB_/$_OPENSSL_LIB_}"
	NEW="${NEW/\_IDN_DIR_/$_IDN_DIR_}"
	NEW="${NEW/\_DLA_DIR_/$_DLA_DIR_}"
	printf "%s\n" $NEW>>"$PARENT/test/Makefile"
done < "$CUR/test.in"
printf "%s\n" "Nharu JCA static library test application Makefile generated"

# GENERATE NHARU MAKEFILE
if [ ! -f "$CUR/Makefile.in" ]; then
	printf "Could not find file %s/Makefile.in\n" "$CUR"
	exit 1
fi
printf "%s\n" "# # # # # # # # # # # # # # # # # # # #">"$PARENT/Makefile"
printf "%s\n" "# Makefile for Nharu libraries">>"$PARENT/Makefile"
printf "%s\n" "# Copyleft (C) 2015 by The Crypthing Initiative">>"$PARENT/Makefile"
printf "%s\n" "# Generated by configure. Do not edit">>"$PARENT/Makefile"
printf "%s\n" "#">>"$PARENT/Makefile"
printf "%s\n" "# Make parameters:">>"$PARENT/Makefile"
printf "%s\n" "#	VERSION=major.minor.release">>"$PARENT/Makefile"
printf "%s\n" "#	DEBUG=1 (optional)">>"$PARENT/Makefile"
printf "%s\n" "#	ALIGN=1 (optional)">>"$PARENT/Makefile"
printf "%s\n" "# # # # # # # # # # # # # # # # # # # #">>"$PARENT/Makefile"
IFS=''
while read -r line || [[ -n "$line" ]]; do
	NEW="${line/\_JDK_/$_JDK_}"
	NEW="${NEW/\_PATH_/$PATH}"
	NEW="${NEW/\_ANT_HOME_/$_ANT_HOME_}"
	NEW="${NEW/\_ANT_CONTRIB_/$_ANT_CONTRIB_}"
	NEW="${NEW/\_OUTPUT_/$_OUTPUT_}"
	NEW="${NEW/\_JEE_LIB_/$_JEE_LIB_}"
	NEW="${NEW/\_PICKETBOX_/$_PICKETBOX_}"
	printf "%s\n" $NEW>>"$PARENT/Makefile"
done < "$CUR/Makefile.in"
printf "%s\n" "Nharu libraries Makefile generated"

# JAVA PROJECTS CREATION
printf "%s\n" "Java projects creation..."
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' libxml-libxml-perl | grep "install ok installed")
printf "Checking for perl XML Support: %s\n" "$PKG_OK"
if [ "" == "$PKG_OK" ]; then
  printf "%s\n" "No perl XML Support. Setting up XML Support..."
  sudo apt-get --force-yes -y install libxml-libxml-perl
fi
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' libxml-xpath-perl | grep "install ok installed")
printf "Checking for perl XPATH Support: %s\n" "$PKG_OK"
if [ "" == "$PKG_OK" ]; then
  printf "%s\n" "No XPATH Support. Setting up XPATH Support..."
  sudo apt-get --force-yes -y install libxml-xpath-perl
fi
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' libswitch-perl|grep "install ok installed")
printf "Checking for perl Switch Support: %s\n" "$PKG_OK"
if [ "" == "$PKG_OK" ]; then
  printf "%s\n" "No Switch Support. Setting up Switch Support..."
  sudo apt-get --force-yes -y install libswitch-perl
fi
if [ ! -f "$CUR/crypt-cfg.pl" -o ! -f "$CUR/java-cfg.xml" ]; then
	printf "Configuration files crypt-cfg.pl and/or java-cfg.xml not found at %s\n" "$CUR"
	exit 1
fi
export NHARU_DIR="$PARENT"
export JEE_LIB="$_JEE_LIB_"
export PICKETBOX="$_PICKETBOX_"
perl "$CUR/crypt-cfg.pl" "$CUR/java-cfg.xml"
if [ $? -ne 0 ]; then
	printf "%s\n" "Could not create Java projects"
	exit $?
fi


# DEBUG SCRIPTS CREATION
if [ ! -f "$CUR/debug.in" ]; then
	printf "Could not find file %s/debug.in\n" "$CUR"
	exit 1
fi
printf "%s\n" "#!/bin/bash">"$PARENT/debug"
printf "%s\n" "# # # # # # # # # # # # # # # # # # # # # # # #">>"$PARENT/debug"
printf "%s\n" "# Debug script for Nharu implementation">>"$PARENT/debug"
printf "%s\n" "# Copyleft (C) 2015 by The Crypthing Initiative">>"$PARENT/debug"
printf "%s\n" "# Generated by configure. Do not edit">>"$PARENT/debug"
printf "%s\n" "#">>"$PARENT/debug"
printf "%s\n" "# # # # # # # # # # # # # # # # # # # # # # # #">>"$PARENT/debug"
IFS=''
while read -r line || [[ -n "$line" ]]; do
	NEW="${line/\_OPENSSL_/$OPENSSL}"
	NEW="${NEW/\_IDN_/$IDN}"
	NEW="${NEW/\_HOME_DIR_/$PARENT}"
	NEW="${NEW/\_JAVA_/$_JDK_/bin/java}"
	NEW="${NEW/\_LIBS_/$_OUTPUT_}"
	printf "%s\n" $NEW>>"$PARENT/debug"
done < "$CUR/debug.in"
chmod -c u+x "$PARENT/debug"
if [ $? -ne 0 ]; then
	printf "%s\n" "Could not create debug script"
	exit $?
fi
if [ ! -f "$CUR/mem-check.in" ]; then
	printf "Could not find file %s/mem-check.in\n" "$CUR"
	exit 1
fi
printf "%s\n" "#!/bin/bash">"$PARENT/mem-check"
printf "%s\n" "# # # # # # # # # # # # # # # # # # # # # # # #">>"$PARENT/mem-check"
printf "%s\n" "# Valgrind script for Nharu implementation">>"$PARENT/mem-check"
printf "%s\n" "# Copyleft (C) 2015 by The Crypthing Initiative">>"$PARENT/mem-check"
printf "%s\n" "# Generated by configure. Do not edit">>"$PARENT/mem-check"
printf "%s\n" "#">>"$PARENT/mem-check"
printf "%s\n" "# # # # # # # # # # # # # # # # # # # # # # # #">>"$PARENT/mem-check"
IFS=''
while read -r line || [[ -n "$line" ]]; do
	NEW="${line/\_HOME_DIR_/$PARENT}"
	NEW="${NEW/\_JAVA_/$_JDK_/bin/java}"
	NEW="${NEW/\_LIBS_/$_OUTPUT_}"
	printf "%s\n" $NEW>>"$PARENT/mem-check"
done < "$CUR/mem-check.in"
chmod -c u+x "$PARENT/mem-check"
if [ $? -ne 0 ]; then
	printf "%s\n" "Could not create mem-check script"
	exit $?
fi
printf "%s\n" "Nharu debug scripts generated"


printf "%s\n" "Nharu development environment configuration complete!"
printf "%s\n" "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"

